<?php


namespace app\api\controller;


use app\admin\model\Good;
use app\admin\model\Shop;
use app\api\model\UserCart;
use app\common\controller\Api;
use think\Db;
use think\Exception;
use think\exception\DbException;

/**
 * 购物车
 */
class Cart extends Api
{
    protected $noNeedLogin = '';
    protected $noNeedRight = '*';

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 添加或者递增商品
     * @param integer $good_id 商品主键：good_id
     * @param integer $shop_id 商家主键：shop_id
     * @throws DbException
     * @throws Exception
     */
    public function postCart($good_id, $shop_id)
    {
        // 先校验产品
        $find_good = Good::get(['id' => $good_id, 'status' => 1]);
        !$find_good && $this->error('产品下架或删除');

        // 在校验商家
        $find_shop = Shop::get(['id' => $shop_id, 'status' => 1]);
        !$find_shop && $this->error('商家被禁用');

        $user_id   = $this->auth->id;
        $user_cart = new UserCart();
        $find_cart = $user_cart->get(['user_id' => $user_id, 'good_id' => $good_id]);

        if ($find_cart) {
            $result = $find_cart->setInc('number');
        } else {
            $user_cart->user_id = $user_id;
            $user_cart->good_id = $good_id;
            $user_cart->shop_id = $shop_id;
            $result             = $user_cart->save();
        }

        $result ? $this->success('添加成功', $result) : $this->error('添加失败');
    }

    /**
     * 删除或递减商品
     * @param integer $good_id 商品主键：good_id
     * @throws DbException
     * @throws Exception
     */
    public function deleteCart($good_id)
    {
        $user_id   = $this->auth->id;
        $user_cart = new UserCart();
        $find      = $user_cart->get(['user_id' => $user_id, 'good_id' => $good_id]);
        if ($find) {
            if ($find->number > 1) {
                $result = $find->setDec('number');
            } else {
                $result = $find->delete();
            }
            $result ? $this->success('删除成功') : $this->error('删除失败');
        } else {
            $this->error('未找到要删除的记录');
        }
    }

    /**
     * 清空购物车
     * @param integer $shop_id 商家主键：id
     */
    public function clearCart($shop_id)
    {
        $user_id = $this->auth->id;
        $result  = (new UserCart())->where(['user_id' => $user_id, 'shop_id' => $shop_id])->delete();
        $result ? $this->success('清空成功', $result) : $this->error('清空失败');
    }

    /**
     * 修改单个商品选中状态
     * @param integer $good_id 商品主键：id
     * @param integer $shop_id 商家主键：id
     * @throws DbException
     */
    public function changeCart($good_id, $shop_id)
    {
        $user_id   = $this->auth->id;
        $user_cart = new UserCart();
        $find_cart = $user_cart->get(['user_id' => $user_id, 'good_id' => $good_id, 'shop_id' => $shop_id]);
        if ($find_cart) {
            $find_cart->select_ = $find_cart->select_ === '1' ? '0' : '1';
            $result             = $find_cart->save();
            $result ? $this->success('操作成功', $result) : $this->error('操作成功');
        } else {
            $this->error('未找到要修改的记录');
        }
    }

    /**
     * 全选、取消全选
     * @param integer $shop_id 商家主键：id
     * @param string $type '1' 全选，'0' false''全不选
     */
    public function changeCarts($shop_id, $type)
    {
        $user_id   = $this->auth->id;
        $user_cart = new UserCart();
        $result    = $user_cart->where(['user_id' => $user_id, 'shop_id' => $shop_id])->update(['select_' => $type]);
        $result ? $this->success('操作成功') : $this->error('操作失败');
    }

    /**
     * 获取购物车
     * @param integer $shop_id 商家主键：id
     * @throws DbException
     * @throws Exception
     */
//    public function getCarts($shop_id)
//    {
//        $user_id = $this->auth->id;
//        $result  = Db::name('user_cart')
//            ->alias('c')
//            ->join('good g', 'g.id = c.good_id')
//            ->field('c.*,g.price,g.thumb_image,g.name,g.original,g.stock')
//            ->where(['c.user_id' => $user_id, 'c.shop_id' => $shop_id])
//            ->select();
//
//        if ($result) {
//            foreach ($result as &$item) {
//                unset($item['user_id']);
//                $item['thumb_image'] = self::patch_oss($item['thumb_image']);
//            }
//            $this->success('获取成功', $result);
//        } else {
//            $this->error('获取失败', []);
//        }
//    }


    /**
     * 获取购物车
     * @param integer $shop_id 商家主键：id
     * @throws DbException
     * @throws Exception
     */
    public function getCarts($shop_id)
    {
        $user_id = $this->auth->id;
        $shop_id = json_decode(html_entity_decode($shop_id));
        $result  = [];
        foreach ($shop_id as $item) {
            $result[] = Db::name('good')
                ->whereIn('id', $item)
                ->select();
        }
        if ($result) {
            foreach ($result as &$item) {
                foreach ($item as &$items) {
                    $items['thumb_image'] = self::patch_oss($items['thumb_image']);
                }
            }
            $this->success('获取成功', $result);
        } else {
            $this->error('获取失败', []);
        }
    }
}