<?php


namespace app\api\controller;


use app\common\controller\Api;
use app\admin\model\Order as Orders;
use think\Db;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\Exception;
use think\exception\DbException;

/**
 * 订单接口
 */
class Order extends Api
{
    protected $noNeedLogin = '';
    protected $noNeedRight = '*';

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 删除订单（只是用户自己看不到）
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function deleteOrder($id)
    {
        $user_id = $this->auth->id;
        $find    = Orders::get(['id' => $id, 'user_id' => $user_id]);
        if ($find) {
            $find->is_show = 0;
            $result        = $find->save();
            $result ? $this->success('删除成功') : $this->error('删除失败');
        } else {
            $this->error('未找到要删除的记录');
        }
    }

    /**
     * 订单列表 废弃的API
     * @param string|bool $shop_id 商家：id
     * @param string|bool $status 状态：id
     * @param string|bool $phone 联系人：id
     * @throws DbException
     * @throws Exception
     */
    public function getOrders_($shop_id = false, $status = false, $phone = false)
    {
        $user_id = $this->auth->id;
        $where   = [];
        if ($shop_id) {
            $where['mini_order.shop_id'] = $shop_id;
        } else {
            $where['mini_order.user_id'] = $user_id;
            $where['mini_order.is_show'] = '1';
        }
        $status && $where['mini_order.status'] = $status;
        ($status && $where['mini_order.status'] == '4') && $where['mini_order.status'] = ['in', ['4', '5', '6', '7', '8', '9', '10']];
        $phone && $where['orderaddress.phone'] = ['like', $phone . '%'];

        $result = (new Orders())
            ->where($where)
            ->with(['ordershop', 'orderaddress', 'ordergood'])
            ->order('updatetime', 'desc')
            ->paginate(null, false, $this->paginate)
            ->each(function ($item) {
                $item->visible(['id', 'status', 'pay_time', 'createtime', 'ordershop', 'total_counts', 'total_price', 'orderaddress', 'ordergood']);
                $item->getRelation('ordershop')->visible(['name', 'id']);
                $item->getRelation('orderaddress')->visible(['contact', 'phone', 'address']);
                if ($item->getRelation('ordergood')) {
                    foreach ($item->getRelation('ordergood') as $items) {
                        $items->hidden(['id', 'order_id']);
                        $items->thumb_image = self::patch_oss($items->thumb_image);
                    }
                }
                return $item;
            });

        $result = $result->toArray();
        foreach ($result['data'] as &$item) {
            // 订单超时
            if ($item['createtime'] + 30 * 60 < time() && $item['pay_time'] === null) {
                $item['status'] = '-1';
                Db::name('order')->where(['id' => $item['id']])->update(['status' => '-1']);
            }
        }

        $result ? $this->success('获取成功', $result) : $this->success('暂无记录');
    }

    /**
     * 订单列表
     * @throws DbException
     * @throws Exception
     */
    public function getOrders($status = false)
    {
        $user_id = $this->auth->id;
        $result  = (new Orders())
            ->where(['table_order.status' => $status, 'table_order.user_id' => $user_id, 'table_order.is_show' => '1'])
            ->with(['ordershop', 'orderaddress', 'ordergood'])
            ->order('updatetime', 'desc')
            ->paginate(null, false, $this->paginate)
            ->each(function ($item) {
                $item->visible(['id', 'status', 'pay_time', 'createtime', 'ordershop', 'total_counts', 'total_price', 'orderaddress', 'ordergood']);
                $item->getRelation('ordershop')->visible(['name', 'id']);
                $item->getRelation('orderaddress')->visible(['contact', 'phone', 'address']);
                if ($item->getRelation('ordergood')) {
                    foreach ($item->getRelation('ordergood') as $items) {
                        $items->hidden(['id', 'order_id']);
                        $items->thumb_image = self::patch_oss($items->thumb_image);
                    }
                }
                return $item;
            });

        $result = $result->toArray();
        foreach ($result['data'] as &$item) {
            // 订单超时
            if ($item['createtime'] + 30 * 60 < time() && $item['pay_time'] === null) {
                $item['status'] = '-1';
                Db::name('order')->where(['id' => $item['id']])->update(['status' => '-1']);
            }
        }

        $result ? $this->success('获取成功', $result) : $this->success('暂无记录');
    }

    /**
     * 订单详情
     * @param integer $id 主键：id
     * @param bool|integer $shop_id 商家:id
     * @throws DbException
     * @throws DataNotFoundException
     * @throws ModelNotFoundException
     */
    public function getOrder($id, $shop_id = false)
    {
        // $user_id = $this->auth->id;
        $where = ['table_order.id' => $id];
        if ($shop_id) {
            $where['table_order.shop_id'] = $shop_id;
        } else {
            // $where['mini_order.user_id'] = $user_id;
            $where['table_order.is_show'] = '1';
        }
        $result = Orders::with(['orderaddress', 'ordershop', 'ordergood'])
            ->where($where)
            ->find();

        if ($result) {
            $result->hidden(['user_id', 'is_show', 'deletetime']);
            $result->orderaddress->hidden(['id', 'order_id']);
            $result->ordershop->visible(['name', 'phone', 'contact']);
            if ($result->getRelation('ordergood')) {
                foreach ($result->getRelation('ordergood') as $items) {
                    $items->hidden(['id', 'order_id']);
                    $items->thumb_image = self::patch_oss($items->thumb_image);
                }
            }
            $this->success('获取成功', $result);
        } else {
            $this->error('获取失败');
        }
    }

    /**
     * 用户确认收货 废弃的API
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function confirmReceiving_($id)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            $find->receiving_time = time();
            $find->status         = '3';
            $result               = $find->save();

            // 收益到账
            $shop_commission = config('site.shop_commission');
            Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setInc('balance', $find->total_price * $shop_commission);
            Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setDec('balance_', $find->total_price * $shop_commission);

            $result ? $this->success('收货成功') : $this->error('收货失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 用户确认收货
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function confirmReceiving($id)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            $find->receiving_time = time();
            $find->status         = '3';
            $result               = $find->save();
            $result ? $this->success('确认成功') : $this->error('确认失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 用户申请退款
     * @param integer $id 主键：id
     * @param string $refund_apply_msg 申请理由
     * @throws DbException
     */
    public function refundApply($id, $refund_apply_msg)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            (time() - $find->pay_time > 3600 * 24 * 3) && $this->error('申请失败，支付时间超过了72小时');
            $find->status == '7' && $this->error('申请失败，商家已经退单');

            $find->refund_apply_time = time();
            $find->refund_apply_msg  = $refund_apply_msg;
            $find->status            = '4';
            $result                  = $find->save();

            $result ? $this->success('申请成功') : $this->error('申请失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * @param $id
     * @param $refund_apply_msg
     * @throws DbException
     */
    public function evaluate($id, $mark, $refund_apply_msg)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            $find->platform_agree_time = time();
            $find->status              = '4';
            $find->platform_agree_msg  = $refund_apply_msg;
            $find->mark                = $mark;
            $result                    = $find->save();
            $result ? $this->success('评价成功') : $this->error('评价失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 商家发货
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function delivery($id)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            $find->status != '1' && $this->error('发货失败，用户已经发起退款申请');
            $find->delivery_time = time();
            $find->status        = '2';
            $result              = $find->save();

            $result ? $this->success('发货成功') : $this->error('发货失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 商家退单
     * @param integer $id 主键：id
     * @param string $back_msg 退单理由
     * @throws DbException
     */
    public function confirmBack($id, $back_msg)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            Db::startTrans();
            try {
                $find->back_time = time();
                $find->back_msg  = $back_msg;
                $find->status    = '7';
                $find->save();

                // 操作商家余额
                Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setDec('balance_', $find->total_price);
                Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setDec('total_price', $find->total_price);

                (new Pay())->refundOrder($find->total_price, $find->numbers);
                Db::commit();
            } catch (DbException $e) {
                Db::rollback();
                $this->error($e->getMessage());
            } catch (Exception $e) {
                Db::rollback();
                $this->error($e->getMessage());
            }
            $this->success('退单成功');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 商家同意退款
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function refundAgree($id)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            Db::startTrans();
            try {
                $find->refund_agree_time = time();
                $find->status            = '5';
                $find->save();

                // 操作商家余额
                Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setDec('balance_', $find->total_price);
                Db::name('shop_balance')->where(['shop_id' => $find->shop_id])->setDec('total_price', $find->total_price);

                (new Pay())->refundOrder($find->total_price, $find->numbers);
                Db::commit();
            } catch (DbException $e) {
                Db::rollback();
                $this->error($e->getMessage());
            } catch (Exception $e) {
                Db::rollback();
                $this->error($e->getMessage());
            }
            $this->success('退款成功');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 商家拒绝退款
     * @param integer $id 主键：id
     * @param string $refund_refuse_msg 拒绝理由
     * @throws DbException
     */
    public function refundRefuse($id, $refund_refuse_msg)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            $find->refund_refuse_time = time();
            $find->refund_refuse_msg  = $refund_refuse_msg;
            $find->status             = '6';
            $result                   = $find->save();

            $result ? $this->success('拒绝成功') : $this->error('拒绝失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }

    /**
     * 用户申请平台介入
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function refundPlatform($id)
    {
        $find = Orders::get(['id' => $id]);
        if ($find) {
            (time() - $find->pay_time > 3600 * 24 * 7) && $this->error('申请失败，支付时间超过了七天');
            $find->status = '8';
            $result       = $find->save();
            $result ? $this->success('申请成功') : $this->error('申请失败');
        } else {
            $this->error('未找到要操作的记录');
        }
    }
}