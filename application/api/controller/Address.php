<?php


namespace app\api\controller;


use app\api\model\UserAddress;
use app\common\controller\Api;
use think\Db;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\exception\DbException;

/**
 * 收货地址
 */
class Address extends Api
{
    protected $noNeedLogin = '';
    protected $noNeedRight = '*';

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 添加收货地址
     * @param string $address 收货地址
     * @param string $longitude 经度
     * @param string $latitude 纬度
     * @param string $doorplate 门牌号
     * @param string $contact 联系人
     * @param string $phone 手机号
     * @throws DbException
     */
    public function postAddress($address, $longitude, $latitude, $doorplate, $contact, $phone)
    {
        $user_address = new UserAddress();
        $user_id      = $this->auth->id;

        $user_address->user_id   = $user_id;
        $user_address->address   = $address;
        $user_address->doorplate = $doorplate;
        $user_address->longitude = $longitude;
        $user_address->latitude  = $latitude;
        $user_address->contact   = $contact;
        $user_address->phone     = $phone;

        $find = $user_address->get(['user_id' => $user_id, 'default' => 1]);
        if(!$find){
            // 更新用户信息
            Db::name('user')->where(['id' => $user_id])->update([
                'mobile'   => $phone,
                'username' => $contact,
                'email'    => $address . $doorplate,
            ]);
            $user_address->default = 1;
        }

        $result = $user_address->save();



        $result ? $this->success('添加成功') : $this->error('添加失败');

    }

    /**
     * 删除收货地址
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function deleteAddress($id)
    {
        $user_id = $this->auth->id;
        $find    = UserAddress::get(['id' => $id, 'user_id' => $user_id]);
        if ($find) {
            $result = $find->delete();
            $result ? $this->success('删除成功') : $this->error('删除失败');
        } else {
            $this->error('未找到要删除的记录');
        }
    }

    /**
     * 更新收货地址
     * @param integer $id 主键：id
     * @param string $data json格式的数据包
     * @throws DbException
     */
    public function putAddress($id, $data)
    {

        $user_id = $this->auth->id;
        $find    = UserAddress::get(['id' => $id, 'user_id' => $user_id]);

        if ($find) {
            Db::startTrans();
            try {
                $data = json_decode(htmlspecialchars_decode($data), true);
                foreach ($data as $item => $value) {
                    $find->data($item, $value);
                    // 更新默认地址
                    if ($item = 'default' && $value == 1) {
                        Db::name('user_address')->where(['user_id' => $user_id, 'id' => ['<>', $id]])->update(['default' => 0]);
                    }
                }
                $find->save();
                if($find->default==1){
                    // 更新用户信息
                    Db::name('user')->where(['id' => $user_id])->update([
                        'mobile'   => $find->phone,
                        'username' => $find->contact,
                        'email'    => $find->address . $find->doorplate,
                    ]);
                }
                Db::commit();
                $this->success('更新成功');
            } catch (DbException $e) {
                Db::rollback();
                $this->error($e->getMessage());
            }
        } else {
            $this->error('未找到要更新的记录');
        }
    }

    /**
     * 收货地址列表
     * @throws DbException
     */
    public function getAddresses()
    {
        $user_id = $this->auth->id;
        $result  = UserAddress::where(['user_id' => $user_id])
            ->order('default', 'desc')
            ->field('id,address,contact,phone,default,doorplate')
            ->paginate(null, false, $this->paginate);
        if ($result) {
            $this->success('获取成功', $result);
        } else {
            $this->success('暂无记录');
        }
    }

    /**
     * 收货地址详情
     * @param integer $id 主键：id
     * @throws DbException
     */
    public function getAddress($id)
    {
        $result = UserAddress::get($id);
        $result ? $this->success('获取成功', $result) : $this->error('获取失败');
    }

    /**
     * 默认收货地址
     * @throws DbException
     */
    public function getDefaultAddress()
    {
        $user_id = $this->auth->id;
        $result  = UserAddress::get(['user_id' => $user_id, 'default' => 1]);
        $result ? $this->success('获取成功', $result) : $this->error('获取失败');
    }

    /**
     * 校验收货地址是否超出商家配送距离
     * @param $address_id integer 收货地址主键：id
     * @param $shop_id integer 商家主键：id
     * @return array|bool|false|\PDOStatement|string|\think\Model|null
     * @throws DbException
     * @throws DataNotFoundException
     * @throws ModelNotFoundException
     */
    public function checkAddress($address_id, $shop_id)
    {
        // 校验收货地址
        $find_address      = Db::name('user_address')->find($address_id);
        $find_shop_address = Db::name('shop_address')->where(['shop_id' => $shop_id])->find();
        $distance          = $this->getDistance($find_shop_address['latitude'], $find_shop_address['longitude'], $find_address['latitude'], $find_address['longitude']);

        // 要添加上0.2千米的误差
        if (($distance + 0.2) > $find_shop_address['distance']) {
            if ($this->request->controller() === 'Address') {
                $this->error('超出了商家的配送范围,请更换收货地址');
            }
            return false;
        } else {
            if ($this->request->controller() === 'Address') {
                $this->success('该收货地址可用');
            }
            return $find_address;
        }
    }

    /**
     * 求两个已知经纬度之间的距离,单位为km
     * @param float $lat1 纬度
     * @param float $lng1 经度
     * @param float $lat2 纬度
     * @param float $lng2 经度
     * @return float 距离，单位为km
     **/
    private static function getDistance($lat1, $lng1, $lat2, $lng2)
    {
        //将角度转为狐度
        $radLat1 = deg2rad($lat1);//deg2rad()函数将角度转换为弧度
        $radLat2 = deg2rad($lat2);
        $radLng1 = deg2rad($lng1);
        $radLng2 = deg2rad($lng2);
        $a       = $radLat1 - $radLat2;
        $b       = $radLng1 - $radLng2;
        $s       = 2 * asin(sqrt(pow(sin($a / 2), 2) + cos($radLat1) * cos($radLat2) * pow(sin($b / 2), 2))) * 6371;
        return round($s, 1);
    }
}